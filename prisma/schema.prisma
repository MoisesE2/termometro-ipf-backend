// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo exemplo para começar - pode ser ajustado conforme necessário
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // Campo para armazenar hash da senha
  name      String?
  isAdmin   Boolean  @default(false) // Flag para indicar se o usuário é administrador
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relação com timers
  timers    Timer[]
  cotas    Cota[]

  @@map("users")
}

model Timer {
  id          String   @id @default(cuid())
  name        String
  duration    Int      // em segundos
  isActive    Boolean  @default(false)
  currentTime Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relação com usuário
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("timers")
}

model Cota {
  id                   String   @id @default(cuid())
  valor               Decimal  @db.Decimal(10, 2)
  dadosCriptografados String   @db.Text
  userId              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relacionamento com usuário
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("cotas")
}
